stages:
  - static analysis
  - build
  - test
  - deploy

# CI variables
.variables:
  default_variables: &default_variables
    CMAKE_BUILD_DIR: "${CI_PROJECT_DIR}/build"
    CMAKE_BUILD_TYPE: "Release"
    CXX: "g++"
    CC: "gcc"
    ENABLE_SANITIZERS: "ON"
    CMAKE_EXPORT_COMPILE_COMMANDS: "ON"
    HESTIA_PROJECT_VERSION: "${CI_NIGHTLY_VERSION}"
    HESTIA_BUILD_TESTS: "OFF"
    HESTIA_BUILD_DOCUMENTATION: "ON"
    HESTIA_CODE_COVERAGE: "OFF"
    HESTIA_WITH_PHOBOS: "OFF"
    HESTIA_WITH_MOTR: "OFF"
    HESTIA_TEST_REDIS: "OFF"
    MOTR_SRC_DIR: ""
    HESTIA_DEPS: "${CI_PROJECT_DIR}/infra/deps/rocky8"
    HESTIA_API_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}"
    PHOBOS_SCRIPTS_DIR: "${CI_PROJECT_DIR}/infra/scripts/phobos"
  nightly_variables: &nightly_variables
    <<: *default_variables
    HESTIA_BUILD_DOCUMENTATION: "ON"
    HESTIA_WITH_PHOBOS: "ON"
    HESTIA_WITH_MOTR: "ON"
    MOTR_SRC_DIR: "/cortx-motr"

# CI code snippets
.snippets:
  - &update_distro
    dnf check-update -q || true; 
    dnf update -qy; 
    dnf install -qy dnf-plugins-core epel-release; 
    dnf install -qy 'dnf-command(config-manager)'; 
    dnf config-manager --set-enabled powertools; 
    dnf update -qy
  - &install_base_dependencies
    dnf install -qy $(cat ${HESTIA_DEPS}/base);
    dnf install -y libxml2-devel || true;
  - &install_release_dependencies
    dnf install -qy $(cat ${HESTIA_DEPS}/release);
  - &install_e2e_dependencies
    dnf install -qy $(cat ${HESTIA_DEPS}/e2e_test);
    pip3 install -r ${CI_PROJECT_DIR}/test/e2e_tests/requirements.txt; 
  - &install_phobos
    dnf install -qy $(cat ${HESTIA_DEPS}/phobos);
    pip3 install -r ${PHOBOS_SCRIPTS_DIR}/phobos_requirements.txt;
    export PHOBOS_SRC=/phobos; cd /;cp ${PHOBOS_SCRIPTS_DIR}/*.patch .;
    ${PHOBOS_SCRIPTS_DIR}/build_phobos.sh;
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/phobos
  - &start_phobos 
    ${PHOBOS_SCRIPTS_DIR}/init_phobos_db.sh;
    ${PHOBOS_SCRIPTS_DIR}/start_phobos.sh ${PHOBOS_SCRIPTS_DIR}/phobos.conf;
    ${PHOBOS_SCRIPTS_DIR}/phobos_add_dir.sh /home/test-phobos-dir test_phobos_dir
  - &configure
    mkdir -p "${CMAKE_BUILD_DIR}"
    && pushd "${CMAKE_BUILD_DIR}"
    && (
      set -x;
      cmake ${CI_PROJECT_DIR}
      -DBUILD_SHARED_LIBS=OFF
      -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}"
      -DCMAKE_EXPORT_COMPILE_COMMANDS="${CMAKE_EXPORT_COMPILE_COMMANDS}"
      -DCMAKE_C_COMPILER="${CC}"
      -DCMAKE_CXX_COMPILER="${CXX}"
      -DCMAKE_PROJECT_VERSION="${HESTIA_PROJECT_VERSION}"
      -DHESTIA_BUILD_TESTS="${HESTIA_BUILD_TESTS}"
      -DHESTIA_TEST_REDIS="${HESTIA_TEST_REDIS}"
      -DHESTIA_BUILD_DOCUMENTATION="${HESTIA_BUILD_DOCUMENTATION}"
      -DCODE_COVERAGE="${HESTIA_CODE_COVERAGE}"
      -DHESTIA_WITH_PHOBOS="${HESTIA_WITH_PHOBOS}"
      -DHESTIA_WITH_MOTR="${HESTIA_WITH_MOTR}"
      -DHESTIA_ENABLE_SANITIZERS="${ENABLE_SANITIZERS}"
      -DMOTR_SRC_DIR="${MOTR_SRC_DIR}"
    )
    && popd
  - &build
    make -C "${CMAKE_BUILD_DIR}" -j$(nproc)
  - &test
    make -C "${CMAKE_BUILD_DIR}" CTEST_OUTPUT_ON_FAILURE=1 test -j$(nproc)
  - &e2e_test 
    python3 ${CI_PROJECT_DIR}/test/e2e_tests/run_e2e_tests.py --source_dir=${CI_PROJECT_DIR} --build_dir=${CMAKE_BUILD_DIR}
  - &create_tgz_package
    cd ${CMAKE_BUILD_DIR}; cpack -G TGZ
  - &create_source_package 
    cmake -DHESTIA_USE_SRC_RPM_SPEC=ON ${CMAKE_BUILD_DIR};
    make -C "${CMAKE_BUILD_DIR}" package_source
  - &build_from_source_package
    rpmbuild --rebuild ${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-1.src.rpm;
    cp /root/rpmbuild/RPMS/hestia-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm ${CMAKE_BUILD_DIR};
    cp /root/rpmbuild/RPMS/hestia-devel-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm ${CMAKE_BUILD_DIR};
    cp /root/rpmbuild/RPMS/hestia-debuginfo-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm ${CMAKE_BUILD_DIR}
  - &generate_docs
    make -C "${CMAKE_BUILD_DIR}" doxygen;
    tar -czvf ${CMAKE_BUILD_DIR}/hestia-docs-${HESTIA_PROJECT_VERSION}.tar.gz --directory=${CMAKE_BUILD_DIR}/doc html
  - &zip_coverage
    tar -czvf ${CMAKE_BUILD_DIR}/hestia-coverage-${HESTIA_PROJECT_VERSION}.tar.gz --directory=${CMAKE_BUILD_DIR}/ccov all-merged

.artifacts:
  build_artifacts: &build_artifacts
    name:  "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - build/
    expire_in: 30 min

.default_job: &default_job
  image: rockylinux:8
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "devel"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push"
        && $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "push"
        && $CI_COMMIT_REF_NAME != "master"
        && $CI_COMMIT_REF_NAME != "devel"
      when: manual
    - when: never # Only run default pipeline to verify devel MRs
  tags:
    - docker
  variables:
    <<: *default_variables
  before_script:
    - *update_distro
    - *install_base_dependencies
  script:
    - *configure
    - *build

Format:
  <<: *default_job
  stage: static analysis
  before_script:
    - *update_distro
    - dnf install -qy $(cat ${HESTIA_DEPS}/format)
  script:
    - ./infra/scripts/run_format.sh
      && git status
      && git diff-index --quiet HEAD
      || { echo "This commit contains unformatted files! Run tools/run_format.sh to format them correctly."; false; }

Lint:
  <<: *default_job
  stage: static analysis
  variables:
    <<: *default_variables
    CMAKE_BUILD_TYPE: "Debug"
    CMAKE_EXPORT_COMPILE_COMMANDS: "ON"
    CXX: "clang++"
    CC: "clang"
    HESTIA_BUILD_TESTS: "ON"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - dnf install -qy $(cat ${HESTIA_DEPS}/lint)
    - *configure
    - make -C "${CMAKE_BUILD_DIR}" hestia_fetch_lint_dependencies -j$(nproc)
  script:
    - make -C "${CMAKE_BUILD_DIR}" hestia_check_tidy -j$(nproc)

Release:
  <<: *default_job
  stage: build
  variables:
    <<: *default_variables
    HESTIA_BUILD_DOCUMENTATION: "ON"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - *install_release_dependencies
  script:
    - *configure
    - *create_source_package
    - *build_from_source_package
    - *generate_docs
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm
      - ${CMAKE_BUILD_DIR}/hestia-devel-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm
      - ${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-1.src.rpm
    expire_in: 1 day

Unit_test:
  <<: *default_job
  stage: test
  dependencies:
    - Release
  variables:
    <<: *default_variables
    CMAKE_BUILD_TYPE: "Debug"
    CXX: "clang++"
    CC: "clang"
    ASAN_OPTIONS: "detect_odr_violation=0" # Issue with plugins https://github.com/google/sanitizers/issues/1017
    HESTIA_BUILD_TESTS: "ON"
    HESTIA_TEST_REDIS: "ON"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - dnf install -qy $(cat ${HESTIA_DEPS}/test)
  script:
    - *configure
    - *build
    - redis-server&
    - *test

E2E_test:
  <<: *default_job
  stage: test
  dependencies:
    - Release
  before_script:
    - *update_distro
    - *install_e2e_dependencies
  script:
    - *e2e_test

# Scheduled Builds
.nightly_snippets:
  - &install_motr
    ${CI_PROJECT_DIR}/infra/scripts/ci/install_motr.sh

.default_nightly_job: &default_nightly_job
  <<: *default_job
  variables:
    <<: *nightly_variables
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
        && $CI_COMMIT_SHA != $CI_LAST_NIGHTLY_COMMIT_SHA
        && $CI_SCHEDULE_TYPE == "NIGHTLY"
      when: on_success

Nightly_build:
  <<: *default_nightly_job
  stage: build
  variables:
    <<: *nightly_variables
    HESTIA_WITH_MOTR: "OFF"
    HESTIA_WITH_PHOBOS: "OFF"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - *install_release_dependencies
  script:
    - *configure
    - *build
    - *create_tgz_package
    - *create_source_package
    - *build_from_source_package
    - *generate_docs
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm
      - ${CMAKE_BUILD_DIR}/hestia-devel-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm
      - ${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-1.src.rpm
    expire_in: 1 hour

Nightly_unit_test:
  <<: *default_nightly_job
  stage: test
  variables:
    <<: *nightly_variables
    HESTIA_BUILD_TESTS: "ON"
    HESTIA_TEST_REDIS: "ON"
    HESTIA_BUILD_DOCUMENTATION: "OFF"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - *install_phobos
    - *install_motr
    - dnf install -qy $(cat ${HESTIA_DEPS}/test)
  script:
    - *configure
    - *build
    - redis-server&
    - *start_phobos
    - *test

Nightly_E2E:
  <<: *default_nightly_job
  stage: test
  before_script:
    - *update_distro
    - *install_base_dependencies
    - *install_phobos
    - *install_e2e_dependencies
  script:
    - *e2e_test

Nightly_code_coverage:
  <<: *default_nightly_job
  stage: test
  dependencies:
    - Release
  variables:
    <<: *nightly_variables
    CMAKE_BUILD_TYPE: "Debug"
    HESTIA_BUILD_TESTS: "ON"
    HESTIA_CODE_COVERAGE: "ON"
    HESTIA_TEST_REDIS: "ON"
    ENABLE_SANITIZERS: "OFF"
    HESTIA_BUILD_DOCUMENTATION: "OFF"
    HESTIA_WITH_PHOBOS: "OFF" #no need for backends for test coverage
    HESTIA_WITH_MOTR: "OFF"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - dnf install -qy $(cat ${HESTIA_DEPS}/test)
  script:
    - *configure
    - *build
    - redis-server&
    - make -C "${CMAKE_BUILD_DIR}" ccov-all
    - *zip_coverage
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ${CMAKE_BUILD_DIR}/*.tar.gz
    expire_in: 1 day

Nightly_deploy:
  <<: *default_nightly_job
  image: alpine:latest
  stage: deploy
  before_script:
    - apk add curl jq
  script:
    - ${CI_PROJECT_DIR}/infra/scripts/ci/nightly_deploy.sh
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm
      - ${CMAKE_BUILD_DIR}/hestia-devel-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm
      - ${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-1.src.rpm
      - ${CMAKE_BUILD_DIR}/*.tar.gz
    expire_in: 1 day

Nightly_cleanup:
  <<: *default_nightly_job
  image: alpine:latest
  stage: .post
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
        && $CI_COMMIT_SHA != $CI_LAST_NIGHTLY_COMMIT_SHA
        && $CI_SCHEDULE_TYPE == "NIGHTLY"
      when: on_failure
  before_script:
    - apk add jq curl
  script: # Stops repeat runs
    - 'curl --request PUT -H "PRIVATE-TOKEN: $(cat $CI_CUSTOM_JOB_TOKEN)"
      "$HESTIA_API_URL/variables/CI_LAST_NIGHTLY_COMMIT_SHA"
      --form "value=$CI_COMMIT_SHA"'

.master_build: &master_build
  <<: *default_nightly_job
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
        && $CI_PIPELINE_SOURCE == "push"
      when: on_success
  stage: build
  variables:
    <<: *nightly_variables
    HESTIA_PROJECT_VERSION: "${CI_NIGHTLY_VERSION}"
    HESTIA_WITH_MOTR: "OFF"
    HESTIA_WITH_PHOBOS: "OFF"
  before_script:
    - *update_distro
    - *install_base_dependencies
    - *install_release_dependencies
  script:
    - *configure
    - *build
    - *create_tgz_package
    - *create_source_package
    - *build_from_source_package
    - *generate_docs
  after_script:
    - ${CI_PROJECT_DIR}/infra/scripts/ci/master_deploy.sh

Master_build:
  <<: *master_build
  after_script:
    - ${CI_PROJECT_DIR}/infra/scripts/ci/master_post_build.sh
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm
      - ${CMAKE_BUILD_DIR}/hestia-devel-${HESTIA_PROJECT_VERSION}-1.x86_64.rpm
      - ${CMAKE_BUILD_DIR}/hestia-${HESTIA_PROJECT_VERSION}-1.src.rpm
      - ${CMAKE_BUILD_DIR}/*.tar.gz
    expire_in: 1 week
    
Master_deploy_current_build:
  <<: *master_build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
        && $CI_COMMIT_REF_NAME == "master"
        && $CI_SCHEDULE_TYPE == "DEPLOY_MASTER_PATCH"
        && $CI_PATCH_RELEASE_VERSION != $CI_NIGHTLY_VERSION
      when: on_success
  variables:
    <<: *nightly_variables
    HESTIA_WITH_MOTR: "OFF"
    HESTIA_WITH_PHOBOS: "OFF"
    HESTIA_PROJECT_VERSION: "${CI_PATCH_RELEASE_VERSION}"

Master_deploy_minor_build:
  <<: *master_build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
        && $CI_COMMIT_REF_NAME == "master"
        && $CI_SCHEDULE_TYPE == "DEPLOY_MASTER_MINOR"
      when: on_success
  variables:
    <<: *nightly_variables
    HESTIA_WITH_MOTR: "OFF"
    HESTIA_WITH_PHOBOS: "OFF"
    HESTIA_PROJECT_VERSION: "${CI_MINOR_RELEASE_VERSION}"

Master_deploy_major_build:
  <<: *master_build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
        && $CI_COMMIT_REF_NAME == "master"
        && $CI_SCHEDULE_TYPE == "DEPLOY_MASTER_MAJOR"
      when: on_success
  variables:
    <<: *nightly_variables
    HESTIA_WITH_MOTR: "OFF"
    HESTIA_WITH_PHOBOS: "OFF"
    HESTIA_PROJECT_VERSION: "${CI_MAJOR_RELEASE_VERSION}"